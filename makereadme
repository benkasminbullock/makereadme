#!/home/ben/software/install/bin/perl

# Make a README file for a Perl module distribution.

use warnings;
use strict;
use Template;
use File::Slurper 'read_text';
use JSON::Parse 'parse_json';
use Pod::Select;

# Get the basic information from the generated meta-information file,
# which is called either MYMETA.json or META.json.

my $m = 'MYMETA.json';
if (! -f $m) {
    $m = 'META.json';
    if (! -f $m) {
	die "No $m";
    }
}
my $j = read_text ($m);
my $p = parse_json ($j);

# The variables to feed to the template toolkit.

my %vars;
$vars{abstract} = $p->{abstract};
$vars{version} = $p->{version};

# Get author and author email address.

my $author = $p->{author}->[0];
$author =~ s/\s+(\S+\@\S+)$//;
my $author_email = $1;
$vars{author} = $author;
$vars{author_email} = $author_email;

undef $author;
undef $author_email;

# Repository.

my $repoweb = $p->{resources}->{repository}->{web};
if (! $repoweb) {
    $repoweb = $p->{resources}->{repository}->{url};
}
if (! $repoweb) {
    die "No repo web";
}
$vars{repository} = $repoweb;

undef $repoweb;

$vars{bugtracker} = $p->{resources}->{bugtracker}->{web};
$vars{hyphens} = $p->{name};
$vars{colons} = $p->{name};
$vars{colons} =~ s/-/::/g;

# Make a figlet version of the name. The spaces are inserted so that
# the name doesn't get truncated at an awkward place.

my $spaces = $vars{colons};
$spaces =~ s/\b/ /g;
$vars{figlet} = `figlet -w 75 $spaces`;

undef $spaces;

# Get minimum required version of Perl for this distribution.

my $required_perl = $p->{prereqs}{runtime}{requires}{perl};
if (! $required_perl) {
    die "Need minimum Perl version in Makefile.PL";
}
if ($required_perl !~ /^5\.([0-9]{3})([0-9]*)$/) {
    die "Unrecognized minimum Perl version $required_perl";
}
$required_perl = '5.' . int ($1);
if ($2) {
    $required_perl .= '.' . int ($2);
}
else {
    $required_perl .= '.0';
}
$vars{required_perl} = $required_perl;
undef $required_perl;

# Locate the documentation. This is specific to "my way of doing
# things".

my $pod = $p->{name};
$pod =~ s!-!/!g;
$pod = "lib/$pod.pod";
if (! -f $pod) {
    $pod =~ s/\.pod$/.pm/;
}

# The "DESCRIPTION" section of the pod. Initially this is set to an
# empty string.

$vars{description} = get_description ($pod);

my $tt = Template->new (
    STRICT => 1,
);

# Date for the timestamp on the final line.

$vars{date} = localtime (time ());

# URLs for this module.

$vars{searchcpan} = "http://search.cpan.org/perldoc?$vars{colons}";
$vars{metacpan} = "http://metacpan.org/release/$vars{hyphens}";
my $template = join ('', <DATA>);
$tt->process (\$template, \%vars, \my $output, binmode => 'utf8')
    or die '' . $tt->error ();

# Truncate lines to 79 characters or less.

my @lines = split /\n/, $output;
my @olines;

# The logic here is really hard to read.

for my $line (@lines) {
    if ($line =~ /api/) {
print STDERR " >>>>>>>>> $line\n";
}
    # If it is not literal text
    if ($line =~ /^\S/) {
	# If it is longer than 75 characters
	while (length $line > 75) {
	    # If it contains a space where it can be broken
	    if ($line =~ /^(.{1,75})\s+(.*)$/) {
		# Save the first part of the line as a new line.
		push @olines, $1;
		# Do the while loop with the remainder.
		$line = $2;
	    }
	    else {
		# Stop this while loop.
		last;
	    }
	}
    }
    if ($line =~ /api/) {
print STDERR "$line\n";
}
    push @olines, $line;
}
$output = join ("\n", @olines);

print $output, "\n";

exit;

sub get_description
{
    my ($pod) = @_;
    my $description;
    if (-f $pod) {
	open my $out, ">", \$description or die $!;
	podselect ({-sections => ["DESCRIPTION"], -output => $out}, $pod);
	close $out;
	# Remove POD, keeping whatever titles may come after it.
	$description =~ s/^=\S+\h*(.*)/$1/gm;
	# Remove the title DESCRIPTION, since we already have ABOUT.
	$description =~ s/\s*DESCRIPTION\s*//;
	# Remove leading and trailing whitespace.
	$description =~ s/^\s+|\s+$//g;
	# Convert multiple empty lines into a single empty line.
	$description =~ s/(\S)\s*\n\s+\n(\S)/$1\n\n$2/g;
	# Hackaround the example program links added by my other script.
	$description =~ s/L<F<([^\>]+?)>\|[^>]+?>/"$1"/g;
	# Convert L<x>, C<x> into "x".
	$description =~ s/[A-Z]<\/?(.*?)>/"$1"/gms;
    }
    return $description;
}

# The rest of the file is the template.

__DATA__
[% dir = hyphens _ "-" _ version -%]
[% file = dir _ ".tar.gz" -%]
[% figlet | indent (2) %]

This is the README for [% colons %] version [% version %].

[% colons %] is a "module" for the Perl computer programming language, a library of computer code to install on a computer.  This document contains four sections:

1. About - what the module does

2. Documentation - how to learn more about the module

3. Installation - how to install this module on a computer

4. Help - what to do if you get stuck

-----------------------------------------------------------------------------

1. ABOUT

[% IF abstract -%]
[% colons %] - [% abstract %]
[%- END %]

[% IF description -%]
[% description %]
[%- END %]

-----------------------------------------------------------------------------

2. DOCUMENTATION

You can read the documentation for the module online at the following websites:

    * [% searchcpan %]
    * [% metacpan %]

(These links go to the latest version of the module.)

After installing the module, you can read the documentation on your computer using

    perldoc [% colons %]

-----------------------------------------------------------------------------

3. INSTALLATION

This module requires Perl version [% required_perl %] or later.

To install the module from CPAN, use

    cpan [% colons %]

If you have the App::cpanminus installer, you may prefer

    cpanm [% colons %]

To install the module from the source file, [% file %], follow this sequence of commands:

    tar xfz [% file %]
    cd [% dir %]
    perl Makefile.PL
    make
    make install

If you want to test the module before installing it, use "make test" after "make" and before "make install".

-----------------------------------------------------------------------------

4. HELP

To get help with the module, you can email the author, [% author %], at [% author_email %]. If you think there is a problem in the module, you can report a bug at 

<[% bugtracker %]>,

or if you want to alter the source code of [% colons %], try the public repository on github at 

<[% repository %]>. 

-----------------------------------------------------------------------------

This README was written on [% date %].

-----------------------------------------------------------------------------

